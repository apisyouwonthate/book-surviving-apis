{\rtf1\ansi\ansicpg1252\cocoartf1671
\stshfdbch0{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
{\stylesheet {\s0 Normal;}}
{\*\expandedcolortbl;;}
{\info
{\author Phil Sturgeon}
{\creatim\yr2018\mo1\dy3\hr12\min16\sec9\timesinceref536670969}
{\revtim\yr2018\mo1\dy20\hr19\min5\sec42\timesinceref538164342}}\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Digest is an approach to authentication similar to Basic, but is designed to improve on the security concerns.\
Instead of transmitting passwords in plain text, it will calculate a MD5 hash and send that. Unlike the\
Base64-based passwords used in the basic auth, MD5 is a one-way hash meaning you cannot simply take the hash\
and calculate the original password without trying out a lot of different combinations.\
> HA1 = MD5(A1) = MD5(username:realm:password)\
> HA2 = MD5(A2) = MD5(method:digestURI)\
> response = MD5(HA1:nonce:HA2)\
The `nonce` is a unique number, which can contain (but should not be only) a timestamp. This helps to avoid\
replay attacks as the same hash will not be usable later on.\
**Pros**\
* Password is not transmitted in plain text\
* The use of `nonce` helps negate rainbow table attacks\
* Generally speaking, more secure than basic auth\
* Easier to implement than some approaches\
**Cons**\
* Harder than basic auth to implement **well**\
* Easy to implement badly\
* Still insecure over HTTP\
* Just like basic auth, passwords can still be stored by the browser\
* Uses MD5\
**MD5... 4... 3... 2... 1... HACKED**\
MD5 is well accepted by many people today to be extremely crackable in most scenarios. Digest authentication has\
not improved since its creation in 1993. While the calculation process should help negate many of\
these issues, a lousy implementation of digest authentication will be open to some weird attack vectors that will\
remain unknown until after the fact.\
Digest is certainly more secure than basic. It is great over SSL - definitely a good choice for an internal API\
if you have more time to spend implementing - but it still requires the username and password to be sent repeatedly,\
meaning it _is_ potentially hackable if the hacker has enough encrypted requests available to process.}