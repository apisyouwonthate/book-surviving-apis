{\rtf1\ansi\ansicpg1252\cocoartf1671
\stshfdbch0{\fonttbl\f0\fnil\fcharset0 Cochin;\f1\fnil\fcharset0 Menlo-Regular{\*\falt Menlo Regular};\f2\fnil\fcharset0 Cochin-Italic{\*\falt Cochin Italic};
}
{\colortbl;\red255\green255\blue255;}
{\stylesheet {\s0 Normal;}{\s1 \tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\li720\fi-720\pardirnatural\partightenfactor0\fs22\cf0 Code Block;}}
{\*\expandedcolortbl;;}
{\info
{\author Phil Sturgeon}
{\creatim\yr2017\mo12\dy21\hr20\min37\sec30\timesinceref535577850}
{\revtim\yr2018\mo1\dy20\hr19\min11\sec47\timesinceref538164707}}\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s0
\f0\fs28 \cf0 To avoid getting all academic and theoretical, learning by doing might be the way to go with understanding HTTP. \
Making your first HTTP query is easy, you just need a HTTP client. Most programming languages have one built in, but before we get into all of that, we can just use the command line. If you have curl available you can do this, otherwise a quick `brew install curl` will help.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s1
\f1\fs22 \cf0 curl -X GET http://example.com\
<!doctype html>\
<html>\
<head>\
    <title>Example Domain</title>\
    <meta charset="utf-8" />\
    ...\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s0
\f0\fs28 \cf0 Right there, we made a request using the GET method (of course -x means \'93method\'94), to the URL {\field{\*\fldinst{HYPERLINK "http://example.com"}}{\fldrslt http://example.com}}, and we got a HTML response. If this was some JSON, and if we were doing it in a programming language, we would be off to a reasonable start!\
Most programming languages come with a HTTP client by default, but often they are hard to work with and have an interface uglier than a bulldog chewing a wasp. For example, the backend language PHP has a curl extension, which is quite time consuming to do anything with, and therefore most folks use {\field{\*\fldinst{HYPERLINK "http://docs.guzzlephp.org/"}}{\fldrslt Guzzle}} (which actually wraps curl).\
A popular HTTP client for JavaScript is {\field{\*\fldinst{HYPERLINK "http://https://github.com/axios/axios"}}{\fldrslt Axios}}, which provides promise-based HTTP interactions. Their README example shows the most basic of API interactions, and it looks a bit like this:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s1
\f1\fs22 \cf0 axios.get(\'91https://api.example.org/companies/12345')\
  .then(function (response) \{\
    console.log(response);\
  \})\
  .catch(function (error) \{\
    console.log(error);\
  \});\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s0
\f0\fs28 \cf0 Quite simply, we are trying to GET the information for whichever company has the identifier 12345. If it works, the then() is called, otherwise catch() is called.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\f2\i \cf0 Identifiers (IDs) are used to reference companies in a unique way. Human readable names might not work as two companies in difference industries might trade under the same name, so an ID helps keep them unique. 
\f0\i0 \
Asking this question of the API is known as the \'93HTTP Request\'94, and the success or fail will be determined by the APIs answer, the \'93HTTP Response\'94.\
The HTTP client is responsible for providing a useful interface between your programming language, and whatever low-level networking library is in place to make the actual requests. At the network level, HTTP is a plain-text protocol that has a request message and response message. A request has method like GET, POST, PUT, PATCH, DELETE, OPTIONS (and a few more), which indicate the sort of request you are making. There\'92s then a host, and a URI, and you need to specify which HTTP version you\'92re talking about.\
The Axios example above would produce a HTTP request like this:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s1
\f1\fs22 \cf0 GET /companies/12345 HTTP/1.1\
Host: {\field{\*\fldinst{HYPERLINK "http://api.example.org"}}{\fldrslt api.example.org}}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s0
\f0\fs28 \cf0 The response may well be something successful, and we might get JSON back to play with:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s1
\f1\fs22 \cf0 HTTP/1.1 200 OK\
Date: Mon, 18 Dec 2018 12:30:00 GMT\
Content-Type: application/json\
Connection: Closed\
\
\{"id":12345,"name":"Patagonia","description":"Expensive outdoor clothing saving the world through taking a decent moral stance\'94\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s0
\f0\fs28 \cf0 It could also be a total failure:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s1
\f1\fs22 \cf0 HTTP/1.1 401 Unauthorized\
Date: Mon, 18 Dec 2018 12:30:00 GMT\
Content-Type: application/json\
Connection: Closed\
\
\{"error":"Get off my land!"\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s0
\f0\fs28 \cf0 Notice here the 401 Unauthorized message on the first line. Thanks to the conventions set up, any HTTP client is going to know that\'92s an error, and Axios will trigger the catch() block for you. Not all HTTP clients are that well set up by default, and some ask their users to pay a bit more attention to detail. Instead of being spoon fed the success or fail, you\'92ll need to programatically  be aware of the \'93status code\'94 in the HTTP response.}