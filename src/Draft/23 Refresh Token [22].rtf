{\rtf1\ansi\ansicpg1252\cocoartf1671
\stshfdbch0{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
{\stylesheet {\s0 Normal;}}
{\*\expandedcolortbl;;}
{\info
{\author Phil Sturgeon}
{\creatim\yr2018\mo1\dy3\hr12\min16\sec9\timesinceref536670969}
{\revtim\yr2018\mo1\dy20\hr19\min5\sec42\timesinceref538164342}}\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\f0\fs28 \cf0 "Refresh tokens" are supported by most popular OAuth 2.0 providers. Basically, you notice that your old access\
token does not work anymore when you receive an HTTP `401` status code, so you request a new one using your\
refresh token. The OAuth 2.0 server will then either give you a new access token, or the server will refuse. At\
that point, you will have to send your user an email saying, "your account is no longer connected to example.org,\
please click here to reconnect". This is not common, and usually means that the user has disconnected access for\
that account anyway, so a manual request is literally the only option.\
This sounds like a bit of a runaround, but it is quite simple and has a few advantages.\
Basically, if you are using the same access token over and over again forever then there is a fairly strong chance of\
somebody finding it. There are an array of reasons for this, from the site not implementing SSL, the site\
getting hacked, the sys admins accidentally exposing some of their access logs, or, more likely, the access\
token being stored in the browser.\
Storing the access token in the browser is fine if the access token is going to expire soon, as it means the\
hacker has a very short window of opportunity to do anything if they find it. If they get the current access\
token then fine, but if there is a five minute expiry then getting that token would be much more difficult, and would\
probably require the hacker to be physically on the device you were using, or SSHing in - at which point you\
have much greater concerns.\
Not all APIs will expire their access tokens, so some do live forever. Normally they either last forever, or\
they will give you an expiry time and expect you to refresh them. One exception to that is Facebook, who do\
neither. Facebook's whole approach is that they _want_ you to be forced to send a user back to `facebook.com` on\
a login.\
It is frustrating that once again Facebook have decided to flagrantly disregard the OAuth 2.0 spec to suit their\
own needs, hurting the user flow and confusing developers in the process. Working with these popular APIs you\
will notice a lot of things like this that wind you up, but the differences are much less problematic if they\
are not even slightly OAuth 2.0 based. At least they have _some_ common ground.\
[Section 6 in the spec][Section 6]}