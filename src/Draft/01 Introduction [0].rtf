{\rtf1\ansi\ansicpg1252\cocoartf1671
\stshfdbch0{\fonttbl\f0\fnil\fcharset0 Cochin;\f1\fnil\fcharset0 Cochin-Italic{\*\falt Cochin Italic};\f2\fnil\fcharset0 Cochin-Bold{\*\falt Cochin Bold};
}
{\colortbl;\red255\green255\blue255;}
{\stylesheet {\s0 Normal;}{\s1 \tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sb260\pardirnatural\partightenfactor0\b\fs36\cf0\outlinelevel1 Heading 1;}}
{\*\expandedcolortbl;;}
{\info
{\author Phil Sturgeon}
{\creatim\yr2017\mo12\dy23\hr15\min49\sec21\timesinceref535733361}
{\revtim\yr2018\mo1\dy20\hr19\min4\sec9\timesinceref538164249}}\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s0
\f0\fs28 \cf0 Web APIs are just code somebody else wrote, that lives on a server controlled by somebody else. The acronym API itself stands for \'93Application Program Interface\'94, and that\'92s what it says on the tin: an interface for interacting with an application. \
This is a rather generic term in the world of computer science and programming, as a Linux command-line utility would consider its command names and options to be an API, whilst a Java library would also consider its method names and arguments to be an API. \
Essentially it\'92s all the same concept, but when talking about Web APIs we\'92re talking about the utilization of network protocols such as HTTP, AMQP, etc., and instead of command-line arguments or method parameters, we\'92re working with URLs, query string parameters, or chunks of data like JSON. \
The goal of a Web API is to provide other applications with access to specific subset of functionality and data that this application owns. Some APIs are public (anyone can get the weather from {\field{\*\fldinst{HYPERLINK "http://api.weather.gov"}}{\fldrslt api.weather.gov}}), some are private (it\'92s probably tough to get access to JPMorgan Chase\'92s Enterprise Customers API), and some are a mixture.\
APIs can give you data for a single-page JavaScript application, handle payment information so you don\'92t have to worry about storing credit card details, post a Facebook status on a users timeline, or share the same data across a myriad of different devices. Watch that Netflix show on your Xbox, it\'92s all good, APIs have you covered.\
For a long time my job was designing and building APIs, Then it was coaching and advising other teams how to build APIs. In more recent years, it has shifted towards helping different teams building different software interact with each others systems. These are sometimes architectural concerns, but a lot of it comes down to clients calling other systems and knowing what to do with the responses. \
Essentially the role has been making HTTP interactions reliable, warning people of potential problems like: don\'92t assume everything is going to be JSON, normalizing state management into the API instead of having loads of clients doing subtly different guesswork, how to configure timeouts to stop half the company\'92s applications crashing, and improving performance with smart usage of HTTP caching. This advice seemed like it should also go into a book, because I\'92ve learned a substantial amount from my time working at WeWork.\
This book aims to help you interact with an API that is already built. It will explain things from the users perspective, and if you do happen to be an API developer, this might give you some insight into how users will be interacting with your API. Everyone wins. That said, if you want help building fantastic web APIs, this might not be first book you should read, and instead you should consider picking up a copy of {\field{\*\fldinst{HYPERLINK "http://apisyouwonthate.com"}}{\fldrslt 
\f1\i Build APIs You Won\'92t Hate}}. This is for the frontend folks, and those building systems that talk to other systems.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sb260\pardirnatural\partightenfactor0

\s1
\f2\b\fs36 \cf0 Terminology\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s0
\f0\b0\fs28 \cf0 APIs are built by all sorts of folks; maybe another company, some large like Google or Facebook, startups, governments, or charity organizations. They could also be coworkers on another team, or another department, on another floor (or continent). Maybe you built an API because you\'92re a full-stack developer who can do frontend and backend! This whole time we\'92re going to refer to \'93them\'94 as the guardians of these Web API(s), and assume we have little control over the API. \
Those writing code that interact with APIs are usually called \'93API Clients\'94 or \'93user agents\'94, and that is usually a frontend application (browser app, iOS app, Android app, etc.), or it can actually be another backend application. Backend applications talking to other Web APIs share a lot of the same properties as a frontend application talking to another API, so this book is aimed at all of you. \
Web API, microservice, service, etc, they\'92re all terms that mean subtly different things, that are often used interchangeably by some. For the duration of this book, we\'92re just going to say API. A micro service, or a service, will probably have an API, otherwise it\'92s not doing anything. So when you see the generic term API, you know we\'92re talking about a web API, which might be part of a service, micro service, a gateway to multiple microservices, or a giant monolithic application with some API endpoints jammed into it. It\'92s all the same as far as API interaction is concerned.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sb260\pardirnatural\partightenfactor0

\s1
\f2\b\fs36 \cf0 Do we really need to read a book?\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\s0
\f0\b0\fs28 \cf0 Integrating an API is meant to be easy, and backend engineers will often just throw that phrase around without really understanding what they\'92re asking from people. \
If you\'92ve never integrated with an API then there\'92s a bit of a learning curve. Beyond that, there are a lot of things to learn, a lot of acronyms and jargon, a lot of conflicting advice on StackOverflow, and a lot of people spouting really bad advice. There are different types of API (REST, RPC, GraphQL, SOAP), different types of transportation layer, lots of different errors to understand, and a tricky balancing act to make your applications both performant and up-to-date with this data that lives somewhere else. Many people don\'92t think about HTTP timeouts or the effects an accidental 10s hang could have on downstream systems. What happens if the user gets on a subway half way through a transaction\'85 Even something as simple as an unexpected validation rule coming back from the API can leave user stuck in a tween-state, with a blank screen and no way to progress. AGGH!\
Some of this would be easier if API developers documenting things extensively, but most of the time you\'92re lucky to get an out-of-date Word document called API Documentation-v2-33-January-18-Final.doc. Sometimes you might have to guess a contract, and that\'92s no easy feat. \
Some of these problems are just lessons learned over time, but in the mean time your application can be suffering all sorts of bug reports, user complaints, server issues, and who knows what other sort of production issues. If it\'92s not as dire as that, there are at least other sources of confusion that\'92ll get you spinning your wheels trying to figure out what to do next. }