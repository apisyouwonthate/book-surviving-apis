{\rtf1\ansi\ansicpg1252\cocoartf1671
\stshfdbch0{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;}
{\stylesheet {\s0 Normal;}}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
{\info
{\author Phil Sturgeon}
{\creatim\yr2018\mo3\dy13\hr14\min46\sec23\timesinceref542641583}
{\revtim\yr2018\mo3\dy14\hr0\min2\sec57\timesinceref542674977}}\deftab720
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\pard\pardeftab720\sl280\sa240\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
Timeouts are a great way to avoid unexpected hangs from slowing a service down too much, and retries are a great solution to having another when that unexpected problem happens. These two concepts are both reactive, and as such can be improved with the addition of a third proactive concept: circuit breakers.\
Circuit breakers are just a few lines of code, maybe using something like Redis to maintain counters of failures and their timestamps. With each failure to a service (or a particular endpoint on that service), the client increments a failure counter and compares it to a certain threshold. Maybe that threshold is 10 failures in 1 minute, or for higher volume systems maybe 5 failures in a second.\'a0\
So in our example, Service A might notice that service B is down after the 10th error in 1 second, and at that point it opens the circuit breaker, meaning it completely stops making calls to that system. This will decrease the load on downstream services (B, C, and D), giving them a chance to recover. This also avoids the \'93running out of threads\'94 issue we discussed previously. Even with service A giving up after 1s, that\'92s still 1s that thread could have spent handling other requests.\'a0\
What to do when a circuit breaker is open? It depends on the feature the circuit breaker is wrapping.\
\pard\tx220\tx720\pardeftab720\li720\fi-500\sl280\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Immediately respond with an error, letting the user know the required system is down, and to try again later\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Have a secondary system kick in that handles things in a different way\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Divert traffic to a cluster of servers elsewhere\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Record information about the attempt and have customer services reach out\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf2 That\'92s only a quick intro to circuit breakers, so head over to see {\field{\*\fldinst{HYPERLINK "https://martinfowler.com/bliki/CircuitBreaker.html"}}{\fldrslt \cf3 \ul \ulc3 Martin Fowler explain circuit breakers in depth}}\'a0if you want more information on the topic.\
\'93Service Meshes\'94 like {\field{\*\fldinst{HYPERLINK "https://www.envoyproxy.io/"}}{\fldrslt \cf3 \ul \ulc3 Envoy}} or {\field{\*\fldinst{HYPERLINK "http://conduit.io"}}{\fldrslt Conduit.io}} are also great solutions for this problem. Instead of asking you to code it up yourself and the application level, it can be handled with network-level tools which are able to be controlled more centrally. \
}