{\rtf1\ansi\ansicpg1252\cocoartf1671
\stshfdbch0{\fonttbl\f0\fnil\fcharset0 Cochin;\f1\fnil\fcharset0 Cochin-Italic{\*\falt Cochin Italic};}
{\colortbl;\red255\green255\blue255;}
{\stylesheet {\s0 Normal;}}
{\*\expandedcolortbl;;}
{\info
{\author Phil Sturgeon}
{\creatim\yr2018\mo1\dy2\hr16\min52\sec15\timesinceref536601135}
{\revtim\yr2018\mo12\dy10\hr4\min51\sec6\timesinceref566106666}}\deftab720
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\pardeftab720\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0

\f0\fs28 \cf0 To send anything to or fetch anything from an API, we\'92re going to need a \'93transport layer\'94 to do it. Transport layers are conceptually about sending things about over the network, and there\'92s a bunch of different levels with a bunch of different protocols that all sit on top of each other. Whole books are written about transportation, network protocols, and all the fun that goes with it, but we\'92re going to skim past some of the stuff that\'92s not relevant. If you don\'92t care about inside the sausage, just skip this chapter.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\pardeftab720\fi360\sl288\slmult1\sb160\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://https://wikipedia.org/wiki/Transmission_Control_Protocol"}}{\fldrslt \cf0 Transmission Control Protocol (TCP)}} and {\field{\*\fldinst{HYPERLINK "http://https://en.wikipedia.org/wiki/User_Datagram_Protocol"}}{\fldrslt User Datagram Protocol (UDP)}} provide two means of sending things around. TCP ensures a packet of data was received, and UDP is a fire and forget approach that\'92s a little quicker due to its blas\'e9 approach. \
One implementation of TCP is TCP/IP, also known as the {\field{\*\fldinst{HYPERLINK "http://https://en.wikipedia.org/wiki/Internet_protocol_suite"}}{\fldrslt Internet Protocol Suite}}. This is a whole bunch of protocols that facilitate the modern Internet as we know it, so yay for that.\
TCP/IP facilitates the {\field{\*\fldinst{HYPERLINK "http://https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"}}{\fldrslt Hypertext Transportation Protocol (HTTP)}}, and 
\f1\i that 
\f0\i0 is what we care about. HTTP is an absolutely fantastic resource for API interaction, as it covers so many fantastic features, that would be just awful to implement from scratch. \
Ever growing and improving, there have been three versions over the years. They\'92re all huge improvements, that reflect the evolving requirements of the web, and the needs of those building software for it. HTTP/1 was pretty standard and expected early-web stuff: a static HTML page to load of a few links to Word documents or something, HTTP/1.1 added a bunch of amazing things to make multiple connections work far quicker (all that CSS/JS/AJAX/etc), and HTTP/2 changes pretty much everything, turns conventional wisdom on its head, and gives us powerful functionality like multiplexing, amongst many other things. \
Learning about HTTP and utilizing its features to make fantastic applications can be tough. HTTP is like snowboarding: you can learn the basics in a very short amount of time, get cocky, and go smashing off at high speed, until you inevitably break three ribs\'85 At 12 years old, HTTP seemed rather clear, and I thought I had a grasp on how it worked. Almost two decades later I\'92m still learning about features, headers, and options, that were either added back then, or by more recent RFCs. \
These are some of the learnings the book will be covering, as HTTP gets a lot of very undue flak for being \'93bulky\'94 or \'93slow\'94, which mostly come down to us using it incredibly poorly. \
This is not just a book about HTTP however. There are a few other protocols that are commonly used for building more \'93real-time\'94 APIs: {\field{\*\fldinst{HYPERLINK "http://https://wikipedia.org/wiki/WebSocket"}}{\fldrslt WebSockets}} which sit on top of a single TCP connection, and {\field{\*\fldinst{HYPERLINK "http://https://wikipedia.org/wiki/Advanced_Message_Queuing_Protocol"}}{\fldrslt Advanced Message Queuing Protocol (AMQP)}}. Often these two technologies will be paired with an HTTP API, providing event-driven interactions for an API that is otherwise mostly just sitting there waiting for you to ask it (or tell) it stuff. \
Whilst there are technically others, depending on the sort of work you are doing, HTTP APIs are probably going to be what you bump into 80-90% of the time, with WebSockets or AMQP popping up now and then. As such, a hefty chunk of the book will be covering HTTP APIs.\
}